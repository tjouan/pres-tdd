Test Driven Development - Retour d'experience personnel

1. Intro rapide théorique : intérêts, termes…
2. Exemple pratique BDD, cycle(s) de développement d'une fonctionalité
3. Retour expérience, avis, présentation usage dans cas réels variés
   (programmes orientés CLI, framework www MVC, provisionning)


intro, retour exp pas expert, toujours en train d'évaluer comment tirer
meilleur profit.


1 théorie
=========

1.1 pourquoi tester ?
---------------------

1.1.1 découverte d'API, TDD en temps que guide, aide au prototypage
1.1.2 régression
1.1.3 test humain couteux, pénible et failible
1.1.4 legacy code (exemple livre)


1.2 terminologie (test, unit/functional/integration/uat)
--------------------------------------------------------

liste termes
la pyramide de Fowler
autres pyramides
le double cycle BDD/TDD

1.2.1 unitaires
  * tester une unité
  * famille Xunit (junit ?)

1.2.2 intégration, fonctionnel
1.2.3 UAT
1.2.4 intégration continue (voir déploiement)
1.2.5 SUT, setup/teardown, double/mock/stub/spyes/verifying/partial, fixtures


2 pratique
==========

dev feature, double cycle red/green/refactor


3 retour d'expérience personnel
===============================

* découverte d'API, inventer partie manquante, mocking/stubbing (attention,
  l'abus est dangereux)
* confiance, aisance
* refactoring
* correction de bug (automatiser bisection + prévention régression)
* même sans faire de TDD pur, tout test est utile, dès le premier

* pas magique
* dependences / environnement
* coût des tests, mesurer quoi tester, comment, dans quel but, éviter code/test
  lasagne


3.1 CLI / ruby
--------------

* CLI
* aruba


3.2 www MVC / rails
-------------------

* MVC
* UAT, intégration framework, browser headless ou réel
* capybara, selenium, poltergeist, phantomjs


3.3 provisionning sshd / ruby
-----------------------------


3.4 X / ruby + C extension
--------------------------



A. outils
=========

rspec
cucumber
selenium
sahi

unittest
nose
behave

phpunit
…




SORT
----

http://c2.com/cgi/wiki?ArrangeActAssert
http://c2.com/cgi/wiki?TenYearsOfTestDrivenDevelopment
http://www.pairwise.org/
http://blog.thecodewhisperer.com/2010/10/16/integrated-tests-are-a-scam/
http://martinfowler.com/articles/mocksArentStubs.html

python
  http://www.korokithakis.net/tutorials/python/
  http://mirnazim.org/writings/python-ecosystem-introduction/
  http://docs.fabfile.org/en/1.3.3/index.html
  tests
    http://readthedocs.org/docs/nose/en/latest/testing.html
    http://docs.python.org/library/unittest.html#basic-example
    http://bemusement.org/diary/2008/October/23/narrative-tests
    http://bemusement.org/diary/2008/October/24/more-doctest-problems
  blocks
    http://www.python.org/dev/peps/pep-0340/
    http://www.python.org/dev/peps/pep-0343/
    http://tav.espians.com/ruby-style-blocks-in-python.html
  flow control
    http://pastebin.com/kH2XnsWW
    http://schlitt.info/opensource/blog/0724_python_good_bad_evil_03_flow_control_exceptions.html
    http://www.javapractices.com/topic/TopicAction.do?Id=19
    http://www.sturmnet.org/blog/2005/03/29/exceptions-flow
  mocks
    http://garybernhardt.github.com/python-mock-comparison/
    https://github.com/nsigustavo/ludibrio/

PHP tests
  STDERR
    http://stackoverflow.com/questions/8348927/is-there-a-way-test-stderr-output-in-phpunit
  http://www.php.net/manual/en/book.runkit.php
    do not compile on PHP >= 5.1
  https://github.com/sebastianbergmann/php-test-helpers
  https://github.com/padraic/mockery
  https://github.com/mlively/Phake

  http://php-and-symfony.matthiasnoback.nl/2012/02/phpunit-writing-a-custom-assertion/

